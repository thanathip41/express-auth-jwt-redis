import dotenv from 'dotenv'
dotenv.config()
const ENV = process.env

const env = {
    NODE_ENV: ENV.NODE_ENV,
    PORT: ENV.PORT,
    APP_URL : ENV.APP_URL,
    PUBLIC_URL : ENV.PUBLIC_URL,
    FRONT_URL : ENV.FRONT_URL,
    DB_USERNAME : ENV.DB_USERNAME,
    DB_PASSWORD : ENV.DB_PASSWORD, 
    DB_DATABASE : ENV.DB_DATABASE,
    DB_HOST : ENV.DB_HOST,
    DB_DIALECT : ENV.DB_DIALECT,
    DB_PORT : ENV.DB_PORT,
    DB_USERNAME_PROD : ENV.DB_USERNAME_PROD,
    DB_PASSWORD_PROD : ENV.DB_PASSWORD_PROD, 
    DB_DATABASE_PROD : ENV.DB_DATABASE_PROD,
    DB_HOST_PROD : ENV.DB_HOST_PROD,
    DB_DIALECT_PROD : ENV.DB_DIALECT_PROD,
    DB_PORT_PROD : ENV.DB_PORT_PROD,

    REDIS_USED : ENV.REDIS_USED,
    REDIS_TIME : ENV.REDIS_TIME,
    REDIS_HOST : ENV.REDIS_HOST,
    REDIS_PORT : ENV.REDIS_PORT,
    REDIS_PASSWORD : ENV.REDIS_PASSWORD,
    
    REDIS_USED_PROD :ENV.REDIS_USED_PROD,
    REDIS_HOST_PROD : ENV.REDIS_HOST_PROD,
    REDIS_PORT_PROD : ENV.REDIS_PORT_PROD,
    REDIS_PASSWORD_PROD : ENV.REDIS_PASSWORD_PROD,

    MAIL_SERVICE : ENV.MAIL_SERVICE,
    MAIL_USERNAME : ENV.MAIL_USERNAME,
    MAIL_PASSWORD : ENV.MAIL_PASSWORD,
    
    JWT_SECRET : ENV.JWT_SECRET,
    JWT_EXPIRE_HOUR :ENV.JWT_EXPIRE_HOUR,
}

Object.entries(env).forEach(([key, value]) => {
    if( value === 'true' || value === 'false') {
        env[key] = JSON.parse(value.toLowerCase())
    }
})

export default env